// http://ionicframework.com/docs/theming/


// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".

//customized toast are here;;;;;;;;;;;;;;;

// .toast-danger-css{
//   width: 80%;
//   margin: auto;
//   height:80%;
//   position: absolute;
//   left: 10%;
//   right: 10%;
//   top: 60px;
//   display: block;
//   .toast-wrapper{
//     background-color:#f11515e7;
//     border-radius: 30px;
//     .toast-container{
//       .toast-message{
//         color:#ffffffde;
//         font-size: 12px;
//       }
//       .toast-button{
//         color:#ffffff;
//         font-size:10px;
//         text-decoration-style: solid;
//       }
//     }
//   }
// }

.toast-default{
  .toast-wrapper{
    background-color:#201d1dc7;
    border-radius: 30px;
    .toast-container{
      .toast-message{
        color:#ffffffde;
        text-align: center;
        font-size: 12px;
      }
      .toast-button{
        color:#ffffff;
        font-size:10px;
        text-decoration-style: solid;
      }
    }
  }
}
.toast-notification{
  width:80%;
  margin-top:20px;
  margin-left:10%;
  .toast-wrapper{
    background-color:#ffffff;
    border-radius: 5px;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    transition: 0.3s;
    // border:1px solid #6459598e;
    .toast-container{
      .toast-message{
        color:#000000;
        font-size: 12px;
      }
      .toast-button{
        color:#000000;
        font-size:10px;
        text-decoration-style: solid;
      }
    }
  }
}
.toast-back-online{
  .toast-wrapper{
    background-color:#368607c7;
    .toast-container{
      .toast-message{
        color:#ffffffde;
        text-align: center;
        font-size: 12px;
      }
    }
  }  
}
.toast-not-online{
  margin-top:55px;
  .toast-wrapper{
    background-color:#d41a1ae7;
    .toast-container{
      .toast-message{
        color:#ffffffde;
        font-size: 12px;
        text-align: center;
      }
    }
  }
}



// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
      @media (max-width: $max) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  
  // Name of the next breakpoint, or null for the last breakpoint.
  //
  //    >> breakpoint-next(sm)
  //    md
  //    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    md
  //    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
  //    md
  @function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.1.
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
  }
  
  
  // Creates text alignment classes based on screen size
  // TODO this would be nice to add to the framework
  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      // Provide text `[text-{bp}]` attributes for aligning text based on screen size
      [text#{$infix}-center] {
        text-align: center;
      }
  
      [text#{$infix}-left] {
        text-align: left;
      }
  
      [text#{$infix}-right] {
        text-align: right;
      }
  
      [hidden#{$infix}-up] {
        display: none;
      }
    }
  
    @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
      [hidden#{$infix}-down] {
        display: none;
      }
    }
  }
  